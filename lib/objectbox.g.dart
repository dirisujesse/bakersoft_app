// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/models/podos/order.dart';
import 'data/models/podos/product.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 8339187772755607119),
      name: 'Product',
      lastPropertyId: const IdUid(9, 2074127469858570513),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6319273641434935498),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8771266751824220111),
            name: 'sku',
            type: 9,
            flags: 2048,
            indexId: const IdUid(1, 163732062615519382)),
        ModelProperty(
            id: const IdUid(3, 3740734264937466236),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1597490854614522770),
            name: 'options',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3365944784916303254),
            name: 'decription',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1107907585487113565),
            name: 'imageUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4987956717067396523),
            name: 'imagePath',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3671438663971823660),
            name: 'price',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2074127469858570513),
            name: 'isFavourite',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 9071270024611186530),
      name: 'ProductOrder',
      lastPropertyId: const IdUid(3, 1454514606730296729),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 9153934265841880092),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6365764082103279340),
            name: 'count',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1454514606730296729),
            name: 'productRefId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 2907084201919725822),
            relationTarget: 'Product')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 9071270024611186530),
      lastIndexId: const IdUid(2, 2907084201919725822),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Product: EntityDefinition<Product>(
        model: _entities[0],
        toOneRelations: (Product object) => [],
        toManyRelations: (Product object) => {},
        getId: (Product object) => object.id,
        setId: (Product object, int id) {
          object.id = id;
        },
        objectToFB: (Product object, fb.Builder fbb) {
          final skuOffset = fbb.writeString(object.sku);
          final nameOffset = fbb.writeString(object.name);
          final optionsOffset = fbb.writeList(
              object.options.map(fbb.writeString).toList(growable: false));
          final decriptionOffset = fbb.writeString(object.decription);
          final imageUrlOffset = fbb.writeString(object.imageUrl);
          final imagePathOffset = fbb.writeString(object.imagePath);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, skuOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, optionsOffset);
          fbb.addOffset(4, decriptionOffset);
          fbb.addOffset(5, imageUrlOffset);
          fbb.addOffset(6, imagePathOffset);
          fbb.addFloat64(7, object.price);
          fbb.addBool(8, object.isFavourite);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Product(
              sku: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              decription: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              price:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 18, 0),
              imagePath: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              imageUrl: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              options: const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGet(buffer, rootOffset, 10, []))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..isFavourite = const fb.BoolReader().vTableGet(buffer, rootOffset, 20, false);

          return object;
        }),
    ProductOrder: EntityDefinition<ProductOrder>(
        model: _entities[1],
        toOneRelations: (ProductOrder object) => [object.productRef],
        toManyRelations: (ProductOrder object) => {},
        getId: (ProductOrder object) => object.id,
        setId: (ProductOrder object, int id) {
          object.id = id;
        },
        objectToFB: (ProductOrder object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.count);
          fbb.addInt64(2, object.productRef.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ProductOrder(
              count: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.productRef.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.productRef.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Product] entity fields to define ObjectBox queries.
class Product_ {
  /// see [Product.id]
  static final id = QueryIntegerProperty<Product>(_entities[0].properties[0]);

  /// see [Product.sku]
  static final sku = QueryStringProperty<Product>(_entities[0].properties[1]);

  /// see [Product.name]
  static final name = QueryStringProperty<Product>(_entities[0].properties[2]);

  /// see [Product.options]
  static final options =
      QueryStringVectorProperty<Product>(_entities[0].properties[3]);

  /// see [Product.decription]
  static final decription =
      QueryStringProperty<Product>(_entities[0].properties[4]);

  /// see [Product.imageUrl]
  static final imageUrl =
      QueryStringProperty<Product>(_entities[0].properties[5]);

  /// see [Product.imagePath]
  static final imagePath =
      QueryStringProperty<Product>(_entities[0].properties[6]);

  /// see [Product.price]
  static final price = QueryDoubleProperty<Product>(_entities[0].properties[7]);

  /// see [Product.isFavourite]
  static final isFavourite =
      QueryBooleanProperty<Product>(_entities[0].properties[8]);
}

/// [ProductOrder] entity fields to define ObjectBox queries.
class ProductOrder_ {
  /// see [ProductOrder.id]
  static final id =
      QueryIntegerProperty<ProductOrder>(_entities[1].properties[0]);

  /// see [ProductOrder.count]
  static final count =
      QueryIntegerProperty<ProductOrder>(_entities[1].properties[1]);

  /// see [ProductOrder.productRef]
  static final productRef =
      QueryRelationToOne<ProductOrder, Product>(_entities[1].properties[2]);
}
